---
import { Icon } from "astro-icon/components";

const navItems = [
  { title: "Home", url: "/#home" },
  { title: "Projects", url: "/#projects" },
  { title: "About Me", url: "/#about" },
  { title: "Email", url: "/#email" },
];
---

<header>
  <div
    class="max-w-screen-xl flex flex-wrap items-center justify-between mx-auto p-4"
  >
    <div class="hidden md:flex space-x-3">
      <button
        class="text-white bg-gray-800 hover:bg-gray-900 focus:outline-none font-poppins rounded-xl text-xs px-5 py-2.5 dark:bg-gray-800 dark:hover:bg-gray-700"
      >
        Spanish
      </button>
      <button
        class="text-white bg-gray-800 hover:bg-gray-900 focus:outline-none font-poppins rounded-xl text-xs px-5 py-2.5 dark:bg-gray-800 dark:hover:bg-gray-700"
      >
        English
      </button>
    </div>
    <div class="flex items-center md:order-2 space-x-3">
      <div class="relative">
        <button
          id="themeToggleButton"
          type="button"
          class="inline-flex items-center p-2 text-sm text-gray-500 rounded-lg hover:bg-gray-100 focus:outline-none dark:text-gray-400 dark:hover:bg-gray-700"
        >
          <Icon id="darkIcon" name="light" size={20} class="hidden" />
          <Icon id="lightIcon" name="dark" size={20} class="hidden" />
        </button>
        <div
          id="themeDropdown"
          class="absolute mt-2 w-[108px] bg-white dark:bg-gray-800 rounded-lg shadow-lg hidden"
        >
          <button
            id="lightModeButton"
            class="block px-4 py-2 text-sm rounded-t-lg text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700"
          >
            Light Mode
          </button>
          <button
            id="darkModeButton"
            class="block px-4 py-2 text-sm rounded-b-lg text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700"
          >
            Dark Mode
          </button>
        </div>
      </div>
    </div>
    <button
      data-collapse-toggle="navbar-cta"
      type="button"
      class="inline-flex items-center p-2 w-10 h-10 justify-center text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700"
      aria-controls="navbar-cta"
      aria-expanded="false"
    >
      <svg
        class="w-5 h-5"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M4 6h16M4 12h16M4 18h16"></path>
      </svg>
    </button>
    <div
      class="items-center justify-between hidden w-full md:flex md:w-auto md:order-1"
      id="navbar-cta"
    >
      <ul
        class="flex flex-col font-medium p-4 md:p-0 mt-4 border rounded-lg md:space-x-8 rtl:space-x-reverse md:flex-row md:mt-0 md:border-0"
      >
        {
          navItems.map((item) => (
            <li>
              <a
                href={item.url}
                class="block py-2 px-3 md:p-0 text-gray-900 rounded hover:bg-gray-100 md:hover:bg-transparent md:hover:text-blue-700 md:dark:hover:text-blue-500 dark:text-white dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent dark:border-gray-700"
              >
                {item.title}
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </div>

  <script type="module">
    const themeToggleButton = document.getElementById("themeToggleButton");
    const themeDropdown = document.getElementById("themeDropdown");
    const lightModeButton = document.getElementById("lightModeButton");
    const darkModeButton = document.getElementById("darkModeButton");

    const lightIcon = document.getElementById("lightIcon");
    const darkIcon = document.getElementById("darkIcon");

    const prefersDarkScheme = window.matchMedia(
      "(prefers-color-scheme: dark)"
    ).matches;
    const savedTheme = localStorage.getItem("theme");

    if (savedTheme === "dark" || (savedTheme === null && prefersDarkScheme)) {
      document.documentElement.classList.add("dark");
      lightIcon.classList.remove("hidden");
      darkIcon.classList.add("hidden");
    } else {
      document.documentElement.classList.remove("dark");
      lightIcon.classList.add("hidden");
      darkIcon.classList.remove("hidden");
    }

    themeToggleButton.addEventListener("click", () => {
      themeDropdown.classList.toggle("hidden");
    });

    lightModeButton.addEventListener("click", () => {
      document.documentElement.classList.remove("dark");
      lightIcon.classList.add("hidden");
      darkIcon.classList.remove("hidden");
      localStorage.setItem("theme", "light");
      themeDropdown.classList.add("hidden");
    });

    darkModeButton.addEventListener("click", () => {
      document.documentElement.classList.add("dark");
      lightIcon.classList.remove("hidden");
      darkIcon.classList.add("hidden");
      localStorage.setItem("theme", "dark");
      themeDropdown.classList.add("hidden");
    });

    document.addEventListener("click", (event) => {
      if (
        !themeToggleButton.contains(event.target) &&
        !themeDropdown.contains(event.target)
      ) {
        themeDropdown.classList.add("hidden");
      }
    });
  </script>
</header>
